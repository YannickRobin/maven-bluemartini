package com.bluemartini.thirdparty.websphere;

import java.lang.String;
import java.util.*;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.*;
import java.sql.*;
import com.bluemartini.database.*;
import com.bluemartini.dna.*;
import com.bluemartini.server.BMAppServer;
import com.bluemartini.server.BMApplication;
import com.bluemartini.server.BMWebApplication;
import com.ibm.websphere.advanced.cm.factory.CMFactoryException;
import com.ibm.websphere.advanced.cm.factory.DataSourceFactory;

/**
 * Fix to configure JNDI in *.appconfig.dna
 * @author Yannick Robin
*/

public aspect WebSphereDataSourceFactoryAspect {

	DataSource around(BMDatabase bmDB, DNAList dnaPool) throws BMException
	: execution(public DataSource WebSphereDatasourceFactoryAspect.getDataSource(BMDatabase, DNAList)) && args(bmDB, dnaPool)
	{
    	//See : http://www.webspherepower.com/issuesprint/issue200410/00001357.html
    	//Properties props = createProperties(bmDB);
    	javax.sql.DataSource dataSource = null;
    	InitialContext ctx = null;
    	String jndiDBAlias = null;
		try {
			
			BMAppServer appserver = BMAppServer.getAppServer();
			Hashtable htEnv = appserver.getInitialContextEnvironment(null);			
			ctx = new InitialContext(htEnv);
			
			BMApplication application = BMApplication.getApplication();
			String appName = application.getName();
			
			//YRO Custom BEGIN
			//To add the flexibility to change the jndi name
			//e.g. "jndiName" String "jdbc/EAC.eac"
			jndiDBAlias = dnaPool.getString("jndiName");
	    	if (jndiDBAlias == null)
	    	{
	    		String poolName = dnaPool.getString("name");
	        	if (poolName == null)
	        		poolName = bmDB.getDBName();
	        	jndiDBAlias = "jdbc/" + appName +"." + bmDB.getDBName();
	    	}
			//YRO Custom END
	    	
			dataSource = (javax.sql.DataSource)ctx.lookup(jndiDBAlias); 
				
			if (dnaPool.getBoolean("initMinimum", true)) {
                int initCap = dnaPool.getAsInteger("initialCapacity", 0);
                Connection[] conn = new Connection[initCap];
                for (int i = 0; i < initCap; i++) {
                    conn[i] = dataSource.getConnection();
                }
                for (int i = 0; i < initCap; i++) {
                	BMLog.log(BMLog.COMPONENT_SYSTEM, 2, "Closing init connection[" + i + "] " + conn[i]);
                    conn[i].close();
                }
            }
			
		} catch (Exception e) {
			BMLog.log(BMLog.COMPONENT_SYSTEM, 0, "Failed to find DataSource : " + jndiDBAlias);
            DNAList params = new DNAList();
            params.setString("jndiDBAlias", jndiDBAlias);
            params.merge(bmDB.getExceptionParams());
            throw new BMException("DATA_SOURCE_FACTORY_FAILURE", e, params);
		}
		
    	return dataSource;
    }
}    