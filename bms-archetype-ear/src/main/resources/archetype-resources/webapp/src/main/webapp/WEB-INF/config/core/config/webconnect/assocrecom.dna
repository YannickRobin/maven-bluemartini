DNA {
    // *
    //     * Scoring methods
    //     *
    //     * The score for a recommendation is based on one of the
    //     * methods defined in the scoring methods below.  If null
    //     * is specified the default scoring method below is used.
    //     *
    //     * The score is essentially a weighted linear combination
    //     * of the support, confidence and lift of the matched rule.
    //     * If the support, confidence or lift fall below the
    //     * specified min or above the specified max then their
    //     * weight in the combination is set to zero.
    //     * Ties are broken arbitrarily.
    //     *
    //     * Supported scoring parameters:
    //     *     supportWeight    : weight for support
    //     *     minSupport       : minimum support
    //     *     maxSupport       : maximum support
    //     *     confidenceWeight : weight for confidence
    //     *     minConfidence    : minimum confidence
    //     *     maxConfidence    : maximum confidence
    //     *     liftWeight       : weight for lift
    //     *     minLift          : minimum lift
    //     *     maxLift          : maximum lift
    //     *
    //     * Support range (0,1]
    //     * Confidence range (0,1]
    //     * Lift range (0,inf)
    // 
    "defaultScoringMethod" String "confidence",
    // *
    //     * Specifies whether the association recommender is enabled.
    //     * If disabled, it will always return empty collections.
    //     * Note that the rules engine must also be enabled.
    // 
    "enabled" Boolean "true",
    // *
    //     * Specifies that the loading thread should pause after
    //     * a certain number of rules are read for a certain amount
    //     * of time.  The loading thread will pause for
    //     * 'loadThreadpauseTime' milliseconds every time
    //     * 'loadThreadPauseRules' rules are loaded.
    //     *
    //     * Pausing frequently for short periods of time reduces
    //     * load on the webstore when loading a model, but increases
    //     * the amount of time that the model is unavailable.
    //     *
    //     * Using a value less than or equal to zero for either
    //     * argument imples that the thread will never pause while
    //     * loading a model.
    //     *
    //     * NOTE: 'loadThreadPauseTime' is in MILLISECONDS
    // 
    "loadThreadPauseRules" Integer "1000",
    "loadThreadPauseTime" Integer "100",
    // *
    //     * Specifies the maximum number of possible recommendations
    //     * which will be examined before they are sorted and the top
    //     * ranked recommendations are returned.
    //     *
    //     * Lowering this value makes the recommender more efficient
    //     * but can reduce the number of recommendations returned
    //     * and the likelihood that it will find the highest ranked
    //     * recommendations.
    //     *
    //     * Using a value less than or equal to zero implies no limit.
    //     * This is NOT recommended.
    // 
    "maxRecommendations" Integer "50",
    // *
    //     * Specifies the maximum number of subsets of the reflected
    //     * objects that will be matched against rules.
    //     *
    //     * Lowering this value makes the recommender more efficient
    //     * but can reduce the number of recommendations returned
    //     * and the likelihood that it will find the highest ranked
    //     * recommendations.
    //     *
    //     * Using a value less than or equal to zero implies no limit.
    //     * This is NOT recommended.
    // 
    "maxSubsetLookups" Integer "1000",
    // *
    //     * Specifies the memory cache refresh time.
    //     * Every 'refreshTime' minutes, all models resident in
    //     * memory are compared to their database versions.  If they
    //     * have changed status or have been updated then the
    //     * in-memory versions are refreshed.
    //     *
    //     * NOTE: 'refreshTime' is in MINUTES
    // 
    "refreshTime" Integer "20",
    "scoringMethods" DNA {
        "confidence" DNA {
            "confidenceWeight" Double "1.0"
        },
        "lift" DNA {
            "liftWeight" Double "1.0"
        },
        "support" DNA {
            "supportWeight" Double "1.0"
        }
    }
}
